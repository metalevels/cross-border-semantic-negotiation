name: Cross-Border Semantic Negotiation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: |
        safety check -r requirements.txt
        
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  compliance:
    name: EU Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: GDPR Compliance Check
      run: |
        python -m pytest tests/compliance/test_gdpr.py -v
        
    - name: eIDAS Compliance Check
      run: |
        python -m pytest tests/compliance/test_eidas.py -v
        
    - name: EIF Compliance Check
      run: |
        python -m pytest tests/compliance/test_eif.py -v

  demo:
    name: Demo Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate HTML Demo
      run: |
        python -c "
        import os
        from pathlib import Path
        demo_file = Path('demo/cross_border_demo.html')
        assert demo_file.exists(), 'Demo HTML file not found'
        content = demo_file.read_text()
        assert 'OntoAligner' in content, 'OntoAligner reference missing'
        assert 'Italy' in content and 'Germany' in content, 'Country references missing'
        print('‚úÖ HTML Demo validation passed')
        "
        
    - name: Test Python Implementation
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from cross_border_implementation import EuropeanDigitalServiceAgent
        agent = EuropeanDigitalServiceAgent()
        print('‚úÖ Python implementation loads successfully')
        "
        
    - name: Validate Ontologies
      run: |
        python -c "
        from pathlib import Path
        import xml.etree.ElementTree as ET
        
        # Check Italian ontology
        italy_owl = Path('ontologies/italy_anpr_birth_certificate.owl')
        assert italy_owl.exists(), 'Italian ontology file not found'
        
        # Check German ontology  
        germany_owl = Path('ontologies/germany_civil_registry.owl')
        assert germany_owl.exists(), 'German ontology file not found'
        
        # Validate XML structure
        for owl_file in [italy_owl, germany_owl]:
            tree = ET.parse(owl_file)
            root = tree.getroot()
            assert 'RDF' in root.tag, f'Invalid RDF structure in {owl_file}'
            
        print('‚úÖ Ontology validation passed')
        "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security, compliance, demo]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test, compliance]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[docs]"
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, compliance, demo, build]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.compliance.result == 'success' }}
      run: |
        echo "üéâ All checks passed! Cross-border semantic negotiation is ready for deployment."
        
    - name: Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.compliance.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed. Please review the logs and fix issues before deployment."
        exit 1